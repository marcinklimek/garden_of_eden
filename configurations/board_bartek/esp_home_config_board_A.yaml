###############################################################################
# Garden Soil Moisture Sensor Configuration
###############################################################################

# Basic Information
esphome:
  name: garden-soil-sensor
  friendly_name: "Garden Soil Sensor"
  comment: "ESP32 board with soil moisture sensor for garden monitoring"

# Calibration Constants
substitutions:
  dry_raw_value: "2900"  # ADC value when soil is completely dry
  wet_raw_value: "1231"  # ADC value when soil is completely wet

# ESP32 Board Configuration
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable Captive Portal for WiFi setup
captive_portal:

# Enable Web Server Interface
web_server:
  port: 80
  local: true
  include_internal: true


# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  - platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  # Set up a Wi-Fi access point for provisioning
  ap: {}

# Enable Logging
logger:

# Time Management
time:
  - platform: homeassistant
    id: homeassistant_time

# Soil Moisture Sensor
sensor:
  # Raw ADC reading from soil moisture sensor
  - platform: adc
    pin: GPIO36
    name: "Soil Moisture Raw"
    update_interval: 1s
    attenuation: 12db
    id: soil_moisture_raw
    unit_of_measurement: "ADC"
    state_class: "measurement"
    accuracy_decimals: 0
    raw: true
  
  # Convert raw ADC reading to percentage
  - platform: template
    name: "Soil Moisture"
    id: soil_moisture_percentage
    unit_of_measurement: "%"
    device_class: "moisture"
    state_class: "measurement"
    accuracy_decimals: 1
    lambda: |-
      // Convert raw ADC to percentage (0-100%)
      // Using configurable calibration values
      float raw = id(soil_moisture_raw).state;
      float dry_raw = atof("${dry_raw_value}");
      float wet_raw = atof("${wet_raw_value}");
      // Map range: remap from dry_raw-wet_raw to 0-100%
      float percentage = 100.0 - ((raw - wet_raw) / (dry_raw - wet_raw) * 100.0);
      // Constrain value between 0-100%
      if (percentage < 0) percentage = 0;
      if (percentage > 100) percentage = 100;
      return percentage;
    update_interval: 1s

# Output pins for control (e.g., water pump, indicator LED)
output:
  - platform: gpio
    pin: GPIO16
    id: out1
  - platform: gpio
    pin: GPIO17
    id: out2

# Switches to control outputs
switch:
  - platform: output
    name: "Water Pump"
    output: out1
    icon: "mdi:water-pump"
  - platform: output
    name: "Indicator"
    output: out2
    icon: "mdi:led-on"

# Binary sensor to trigger alerts based on moisture level
binary_sensor:
  - platform: template
    name: "Low Soil Moisture Alert"
    lambda: |-
      return id(soil_moisture_percentage).state < 30.0;
    filters:
      - delayed_off: 10min
    device_class: "moisture"
